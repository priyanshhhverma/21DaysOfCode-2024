Geek has n horses numbered from O to n - 1 and a 2D array data of size m where data[i] = {horse_a, horse_b} denotes that horse_a is faster than horse_b.

Geek wants to arrange the horses in order such that if horse_a is before horse_b, then horse_a is not faster than horse_b.

Since there could be multiple arrangements, he aims to obtain the lexicographically smallest arrangement.

Input Format
Input: n = 4 m = 4 data = {{3, 1}, {0, 2}, {2, 1}, {0, 3}}
Output: 1 2 3 0

Explanation: The slowest horse is 1, and the fastest horse is O. Horses 2 and 3 have speeds between them. The order 1, 2, 3, O represents the lexicographically smallest valid order.

Constraints
1 <= n <= 105 O <= m <= (n*(n-1))/2 data[i][0] != data[i][1] 0 <= data[i][0] != data[i][1] < n

Output Format
Input: n = 4 m = 4 data = {{0, 3}, {2, 0}, {1, 2}, {1, 3}}
Output: 3 0 2 1

Explanation: The order 3, O, 2, 1 is the lexicographically smallest valid and the only order.

Sample Input 0
4
4
3 1
0 2
2 1
0 3

Sample Output 0
1 2 3 0

Sample Input 1
4
4
0 3
2 0
1 2
1 3

Sample Output 1
3 0 2 1
