from collections import deque

class TreeNode:
    def __init__(self, value=0, left=None, right=None):
        self.value = value
        self.left = left
        self.right = right

def level_order_traversal(root):
    if root is None:
        return []
    
    result = []
    queue = deque([root])
    
    while queue:
        current_node = queue.popleft()  # Dequeue the front node
        result.append(current_node.value)
        
        # Enqueue the left child if it exists
        if current_node.left is not None:
            queue.append(current_node.left)
        
        # Enqueue the right child if it exists
        if current_node.right is not None:
            queue.append(current_node.right)
    
    return result


root = TreeNode(1)
root.left = TreeNode(2)
root.right = TreeNode(3)
root.left.left = TreeNode(4)
root.left.right = TreeNode(5)

print(level_order_traversal(root))  # Output: [1, 2, 3, 4, 5]
